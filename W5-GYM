{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/gauduv/PRA3024-MSP/blob/main/W5-GYM\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        ""
      ],
      "metadata": {
        "id": "9PakHhkXiAIM"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "2iv2rJ1irpVc"
      },
      "outputs": [],
      "source": [
        "# Cartpole game, as per https://keon.io/deep-q-learning/\n",
        "#!pip install gym\n",
        "\n",
        "# GYM provides an environment for an agent to interact with. We'll look at the 'cartpole',\n",
        "#  or the unstable, top-heavy inverted pendulum on top of a cart, which our 'agent' must learn to balance.\n",
        "#\n",
        "# GYM provides:\n",
        "#  - a state (observation) of the system/environment\n",
        "#    (in case of cartpole: cart position and velocity, angle and velocity at the tip\n",
        "#  - a set of _actions_ the agent can undertake in the environment\n",
        "#    (in case of cartpole: moving the cart base left or right)\n",
        "\n",
        "# When an agent performs a certain action in the current enviroment, GYM returns\n",
        "#  - a _reward_ for a certain result of performing the action in the environment\n",
        "#    (in case of cartpole: +1 if it didn't die.)\n",
        "#  - the new _state_ of the environment after performing said action\n",
        "#    (in case of cartpole: the effect of gravity pulling on the pendulum's top, on the angle, in one time step)\n",
        "#  - a 'terminal' in case the state is such that the agent cannot continue (is 'dead')\n",
        "#    (in case of cartpole: if the angle exceeds > 5 degrees of tipping over, or it flies off-screen)\n",
        "\n",
        "# It is up to us to make an agent that learns which action to take in which state, to maximise the total reward before it dies.\n",
        "#  We do this by 'remembering' what the results were of certain actions on certain states in a memory (i.e. a list or deque),\n",
        "#  And after every 'death' we sample ('replay') from this memory to train a neural network that decides the best actions\n",
        "#   we can take on any state we've encountered so far, which maximises the total reward.\n",
        "\n",
        "# In addition, GYM provides a nice real-time visual output of the environment and the result of actions taken.\n",
        "#  In google COLAB however, we pull some strings, and only have a combined video at the end.\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "rVf34L_Q0rE_"
      },
      "outputs": [],
      "source": [
        "COLAB = True\n",
        "\n",
        "if(COLAB) :\n",
        "  # install some helpers to visualize gym graphics in the colab environment\n",
        "  !pip install gym pyvirtualdisplay > /dev/null 2>&1\n",
        "  !apt-get install -y xvfb python-opengl ffmpeg x11-utils > /dev/null 2>&1"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "fA7nN0_rrwRa"
      },
      "outputs": [],
      "source": [
        "import gym\n",
        "import numpy as np\n",
        "from matplotlib import pyplot as plt\n",
        "import random\n",
        "\n",
        "import tensorflow.keras as keras\n",
        "\n",
        "from collections import deque\n",
        "from keras.models import Sequential\n",
        "from keras.layers import Dense\n",
        "#from keras.optimizers import Adam"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Adam Import kept failing, replaced by called it with whole name when required"
      ],
      "metadata": {
        "id": "yOiZBM-biH8-"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "BRnwGNBeuNbY",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "bba3cb14-1d9c-4fe6-d638-dcd2550c37ce"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Imageio: 'ffmpeg-linux64-v3.3.1' was not found on your computer; downloading it now.\n",
            "Try 1. Download from https://github.com/imageio/imageio-binaries/raw/master/ffmpeg/ffmpeg-linux64-v3.3.1 (43.8 MB)\n",
            "Downloading: 8192/45929032 bytes (0.0%)\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b1835008/45929032 bytes (4.0%)\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b4440064/45929032 bytes (9.7%)\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b7340032/45929032 bytes (16.0%)\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b10035200/45929032 bytes (21.8%)\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b13385728/45929032 bytes (29.1%)\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b16695296/45929032 bytes (36.4%)\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b20201472/45929032 bytes (44.0%)\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b23699456/45929032 bytes (51.6%)\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b26935296/45929032 bytes (58.6%)\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b29065216/45929032 bytes (63.3%)\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b31580160/45929032 bytes (68.8%)\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b34078720/45929032 bytes (74.2%)\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b37363712/45929032 bytes (81.4%)\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b40861696/45929032 bytes (89.0%)\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b44179456/45929032 bytes (96.2%)\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b45929032/45929032 bytes (100.0%)\n",
            "  Done\n",
            "File saved as /root/.imageio/ffmpeg/ffmpeg-linux64-v3.3.1.\n"
          ]
        }
      ],
      "source": [
        "# only necessary for visualisation in colab env.\n",
        "if(COLAB) :\n",
        "  from IPython.display import HTML\n",
        "  from IPython import display as ipythondisplay\n",
        "  from pyvirtualdisplay import Display\n",
        "  from gym.wrappers import Monitor\n",
        "  import glob, io, os, base64\n",
        "  from moviepy.editor import VideoFileClip, concatenate_videoclips\n",
        "\n",
        "  display = Display(visible=0, size=(1400, 900))\n",
        "  display.start()\n",
        "  #os.environ[\"DISPLAY\"] = \":\" + str(display.display) + \".\" + str(display.screen)\n",
        "\n",
        "  def combine_videos() :\n",
        "    mp4list = sorted( glob.glob('video/*.mp4') )\n",
        "    if len(mp4list) > 0 :\n",
        "      videolist = []\n",
        "      for mp4 in mp4list :\n",
        "        videolist.append( VideoFileClip(mp4))\n",
        "      final_clip = concatenate_videoclips(videolist)\n",
        "      final_clip.to_videofile(\"combined.mp4\", fps=24, remove_temp=False)\n",
        "      return 1\n",
        "    else :\n",
        "      return 0\n",
        "\n",
        "  def show_video() :\n",
        "      if(combine_videos()) :\n",
        "        video = io.open(\"combined.mp4\", 'r+b').read()\n",
        "\n",
        "        encoded = base64.b64encode(video)\n",
        "        ipythondisplay.display(HTML(data='''<video alt=\"test\" autoplay \n",
        "                  loop controls style=\"height: 400px;\">\n",
        "                  <source src=\"data:video/mp4;base64,{0}\" type=\"video/mp4\" />\n",
        "               </video>'''.format(encoded.decode('ascii'))))\n",
        "      else :\n",
        "        print(\"Error: no videos found\")     \n",
        "\n",
        "\n",
        "  def wrap_env(env):\n",
        "    env = Monitor(env, './video', video_callable=lambda episode_id: True, force=True)\n",
        "    return env\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "iVzZ7nmErzCw"
      },
      "outputs": [],
      "source": [
        "ENV_NAME = \"CartPole-v1\"\n",
        "\n",
        "###original values\n",
        "\n",
        "\n",
        "#\n",
        "\n",
        "### STUDENT CODE HERE ###\n",
        "### --> Change the parameters below to perform a better training, original in comment\n",
        "\n",
        "MAXRUNS = 50\n",
        "#MAXRUNS = 50\n",
        "\n",
        "NSTEPSOLVED = 1000\n",
        "#NSTEPSOLVED = 1000\n",
        "\n",
        "\n",
        "GAMMA = 0.51  # 'future discount factor'\n",
        "#GAMMA = 0.5  \n",
        "LEARNING_RATE = 0.0001 # rate at which to update weights after each training step\n",
        "#LEARNING_RATE = 0.000001 \n",
        "\n",
        "MEMORY_SIZE = 100 # size of container to hold actions and outcomes\n",
        "#MEMORY_SIZE = 100\n",
        "BATCH_SIZE = 50 # number of actions in memory to 'replay' after each death\n",
        "#BATCH_SIZE = 50\n",
        "\n",
        "# probability to do 'random' actions, to sample from event space\n",
        "EXPLORATION_MAX = 1.0 \n",
        "#EXPLORATION_MAX = 1.0  \n",
        "EXPLORATION_MIN = 0.01\n",
        "#EXPLORATION_MIN = 0.01\n",
        "EXPLORATION_DECAY = 0.995   # 0.995 --> 1% after ~35 runs\n",
        "#EXPLORATION_DECAY = 0.995\n"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "I tried various changes in the parameters without much change in the end result, other than execution time."
      ],
      "metadata": {
        "id": "l6dWk08Oijve"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "U2bZXXrqr5Tj"
      },
      "outputs": [],
      "source": [
        "class DQNSolver:\n",
        "\n",
        "    def __init__(self, observation_space, action_space):\n",
        "        self.observation_space = observation_space\n",
        "        self.exploration_rate = EXPLORATION_MAX\n",
        "        self.action_space = action_space\n",
        "\n",
        "        self.memory = deque(maxlen=MEMORY_SIZE)\n",
        "\n",
        "\n",
        "        # This will be a simple feed-forward NN, with \n",
        "        #  - input = 'observation' (aka state)\n",
        "        #  - output = predicted 'quality' of each possible action\n",
        "        self.model = Sequential()\n",
        "\n",
        "        ### STUDENT CODE HERE ###\n",
        "        Output_Space= range(0,action_space)\n",
        "\n",
        "        self.model.add(Dense(units=64, input_dim=self.observation_space, activation='relu' ))\n",
        "        #self.model.add(Dense(units=64, activation='relu' )) ## optional additional layer\n",
        "        self.model.add(Dense(self.action_space,activation='linear'))\n",
        "\n",
        "        ### --> Write the network using fully-connected (Dense) layers.\n",
        "        ###  Make sure the input has the same shape as an observation/state,\n",
        "        ###   and the output has the same dimensions as the number of possible actions.\n",
        "        ### END STUDENT CODE ###\n",
        "        \n",
        "        self.model.compile(loss=\"mse\", optimizer=keras.optimizers.Adam(lr=LEARNING_RATE))\n",
        "        \n",
        "        \n",
        "\n",
        "\n",
        "        self.model.summary()\n",
        "        \n",
        "        \n",
        "    def remember(self, state, action, reward, next_state, done):\n",
        "        \n",
        "        # add event to memory\n",
        "        self.memory.append((state, action, reward, next_state, done))\n",
        "\n",
        "    def act(self, state):\n",
        "        # return the best possible action for the current state\n",
        "\n",
        "        # sometimes allow for a random action at the 'exploration rate', to avoid local minima\n",
        "        if np.random.rand() < self.exploration_rate:\n",
        "            return random.randrange(self.action_space)\n",
        "        \n",
        "        # Get predicted qualities for each possible action, and return the action (=index) with the highest quality\n",
        "        q_values = self.model.predict(state) \n",
        "        return np.argmax(q_values[0])\n",
        "\n",
        "    def experience_replay(self):\n",
        "        # Learn from random subset of memory (reduces corr. between subsequent actions).\n",
        "        # learning is done by comparing 'predicted quality' to the here defined quality (~reward) of the action.\n",
        "        \n",
        "        if len(self.memory) < BATCH_SIZE:\n",
        "            # We haven't experienced enough to properly learn yet - keep exploring!\n",
        "            return\n",
        "        \n",
        "        # Get random subset of memory\n",
        "        batch = random.sample(self.memory, BATCH_SIZE) \n",
        "        \n",
        "        for state, action, reward, state_next, terminal in batch:\n",
        "\n",
        "            # We define the 'quality' of a move by taking the known, memorized reward for the action,\n",
        "            #  and adding the predicted quality of the (predicted) best choice of action for the next state, to that.\n",
        "            # As the model learns to give this situation a low quality, any step leading up to this state will get a \n",
        "            #  lower quality due to the predict(state_next) term. This will slowly trickle through to the step before that, etc.,\n",
        "            #  slowly making our agent learn about future consequences of current actions.\n",
        "          \n",
        "            q_update = reward\n",
        "            if not terminal:\n",
        "                q_update = (reward + GAMMA * np.amax(self.model.predict(state_next)[0]))\n",
        "                \n",
        "            # - Define the quality of the non-chosen action to just be the predicted quality (i.e. diff = 0)\n",
        "            # - Define the quality of the chosen action to be the newly defined quality\n",
        "            q_values = self.model.predict(state)\n",
        "            q_values[0][action] = q_update \n",
        "            \n",
        "            # Finally, find the optimal model weights for minimal difference between \n",
        "            #  predicted quality and observed quality (+ future prediction as per above) for this action.\n",
        "            # The weights are then updated * learning rate\n",
        "            self.model.fit(state, q_values, verbose=0) \n",
        "            \n",
        "        # reduce the 'random choices' rate over time, because you expect the model to have learned\n",
        "        self.exploration_rate *= EXPLORATION_DECAY\n",
        "        self.exploration_rate = max(EXPLORATION_MIN, self.exploration_rate)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "model runs with just two layers, an additional layer did not noticeably improve performance vs executuion-time ratio"
      ],
      "metadata": {
        "id": "Lclb01dhi6WK"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "MCAlTnFAr8M8"
      },
      "outputs": [],
      "source": [
        "def cartpole() :\n",
        "    if(COLAB) : env = wrap_env(gym.make(ENV_NAME)) # only for visualisation in colab\n",
        "    else : env = gym.make(ENV_NAME)\n",
        "    observation_space = env.observation_space.shape[0]\n",
        "    action_space = env.action_space.n\n",
        "    dqn_solver = DQNSolver(observation_space, action_space)\n",
        "    \n",
        "    run=0\n",
        "    runsteplog = []\n",
        "    #while True:\n",
        "    for i in range(MAXRUNS):\n",
        "        run += 1\n",
        "        state = env.reset()\n",
        "        state = np.reshape(state, [1, observation_space])\n",
        "        step = 0\n",
        "        while True :    \n",
        "            step += 1\n",
        "            screen = env.render() # graphical output\n",
        "\n",
        "            # decide on an action\n",
        "            ### STUDENT CODE HERE\n",
        "            ### --> Redefine the action to be the output of the 'act' of your solver.\n",
        "            action = dqn_solver.act(state) \n",
        "            ### END STUDENT CODE\n",
        "            \n",
        "            # make the action\n",
        "            state_next, reward, terminal, info = env.step(action) \n",
        "\n",
        "            # if action made terminal: reduce reward!\n",
        "            reward = reward if not terminal else -reward  \n",
        "\n",
        "            state_next = np.reshape(state_next, [1, observation_space])\n",
        "\n",
        "            # fill agent memory with this action's results\n",
        "            dqn_solver.remember(state, action, reward, state_next, terminal) \n",
        "\n",
        "            # prepare for the next action in the environment\n",
        "            state = state_next \n",
        "            \n",
        "            if terminal :\n",
        "                #state = env.reset()\n",
        "                #state = np.reshape(state, [1, observation_space])\n",
        "                print(\"Run: {0}, exploration: {1:.15f}, score: {2}\".format(run,dqn_solver.exploration_rate,step))\n",
        "                runsteplog += [step]\n",
        "\n",
        "                break\n",
        "            \n",
        "            dqn_solver.experience_replay() # learn from batch of memories every time a new one is made\n",
        "            \n",
        "            #if(step > NSTEPSOLVED) :\n",
        "            #    i = MAXRUNS\n",
        "            #    print(\"Solved! (step > NSTEPSOLVED)\")\n",
        "            #    break\n",
        "\n",
        "\n",
        "    env.close()\n",
        "    \n",
        "\n",
        "\n",
        "    # Show training process\n",
        "    \n",
        "    # plot #steps achieved\n",
        "    plt.plot(runsteplog)\n",
        "    plt.ylabel(\"# actions before terminal\")\n",
        "    plt.xlabel(\"run iteration\")\n",
        "\n",
        "    success_measure = np.mean(runsteplog[-15:])\n",
        "    print(\"Mean of last 15 runs: {0}\".format(success_measure))\n",
        "    return success_measure"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "RBDY7DTDr-uK",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "outputId": "247ca43f-04f5-47a7-9b86-614f3cf9174a"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model: \"sequential\"\n",
            "_________________________________________________________________\n",
            " Layer (type)                Output Shape              Param #   \n",
            "=================================================================\n",
            " dense (Dense)               (None, 64)                320       \n",
            "                                                                 \n",
            " dense_1 (Dense)             (None, 2)                 130       \n",
            "                                                                 \n",
            "=================================================================\n",
            "Total params: 450\n",
            "Trainable params: 450\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n",
            "Run: 1, exploration: 1.000000000000000, score: 14\n",
            "Run: 2, exploration: 1.000000000000000, score: 20\n",
            "Run: 3, exploration: 0.951110130465772, score: 26\n",
            "Run: 4, exploration: 0.891109055780209, score: 14\n",
            "Run: 5, exploration: 0.814228520417561, score: 19\n",
            "Run: 6, exploration: 0.778312557068642, score: 10\n",
            "Run: 7, exploration: 0.686643093187200, score: 26\n",
            "Run: 8, exploration: 0.646558796755301, score: 13\n",
            "Run: 9, exploration: 0.611873878428048, score: 12\n",
            "Run: 10, exploration: 0.584883863658591, score: 10\n",
            "Run: 11, exploration: 0.529092072809072, score: 21\n",
            "Run: 12, exploration: 0.495714136901051, score: 14\n",
            "Run: 13, exploration: 0.473847977308227, score: 10\n",
            "Run: 14, exploration: 0.443955132131454, score: 14\n",
            "Run: 15, exploration: 0.413868345841987, score: 15\n",
            "Run: 16, exploration: 0.389707873504741, score: 13\n",
            "Run: 17, exploration: 0.357875158086764, score: 18\n",
            "Run: 18, exploration: 0.331953891352235, score: 16\n",
            "Run: 19, exploration: 0.210367241376096, score: 92\n",
            "Run: 20, exploration: 0.181906179876077, score: 30\n",
            "Run: 21, exploration: 0.050667916213027, score: 256\n",
            "Run: 22, exploration: 0.045834728019981, score: 21\n",
            "Run: 23, exploration: 0.041880331635475, score: 19\n",
            "Run: 24, exploration: 0.040032972548509, score: 10\n",
            "Run: 25, exploration: 0.038267101249794, score: 10\n",
            "Run: 26, exploration: 0.036762937968474, score: 9\n",
            "Run: 27, exploration: 0.035141309273870, score: 10\n",
            "Run: 28, exploration: 0.033591211304732, score: 10\n",
            "Run: 29, exploration: 0.031948941366547, score: 11\n",
            "Run: 30, exploration: 0.030693125720441, score: 9\n",
            "Run: 31, exploration: 0.029486672365214, score: 9\n",
            "Run: 32, exploration: 0.028327641019449, score: 9\n",
            "Run: 33, exploration: 0.027214167668287, score: 9\n",
            "Run: 34, exploration: 0.025883670561502, score: 11\n",
            "Run: 35, exploration: 0.024741930939380, score: 10\n",
            "Run: 36, exploration: 0.023888845163906, score: 8\n",
            "Run: 37, exploration: 0.022949847368015, score: 9\n",
            "Run: 38, exploration: 0.021937519923982, score: 10\n",
            "Run: 39, exploration: 0.021075222784267, score: 9\n",
            "Run: 40, exploration: 0.020145585821045, score: 10\n",
            "Run: 41, exploration: 0.019353724157030, score: 9\n",
            "Run: 42, exploration: 0.018315485492451, score: 12\n",
            "Run: 43, exploration: 0.017683979399301, score: 8\n",
            "Run: 44, exploration: 0.016903931611682, score: 10\n",
            "Run: 45, exploration: 0.016239489508418, score: 9\n",
            "Run: 46, exploration: 0.015601164601953, score: 9\n",
            "Run: 47, exploration: 0.014912990653248, score: 10\n",
            "Run: 48, exploration: 0.014255172347583, score: 10\n",
            "Run: 49, exploration: 0.013694844909292, score: 9\n",
            "Run: 50, exploration: 0.013156542237202, score: 9\n",
            "Mean of last 15 runs: 9.4\n",
            "[MoviePy] >>>> Building video combined.mp4\n",
            "[MoviePy] Writing video combined.mp4\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 486/486 [00:03<00:00, 148.43it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[MoviePy] Done.\n",
            "[MoviePy] >>>> Video ready: combined.mp4 \n",
            "\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "<video alt=\"test\" autoplay \n",
              "                  loop controls style=\"height: 400px;\">\n",
              "                  <source src=\"data:video/mp4;base64,\" type=\"video/mp4\" />\n",
              "               </video>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "MAXRUNS = 50\n",
        "#MAXRUNS = 50\n",
        "\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    cartpole()\n",
        "\n",
        "if(COLAB) :\n",
        "    show_video() "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "ecN2oFiWsAkH"
      },
      "outputs": [],
      "source": [
        ""
      ]
    }
  ],
  "metadata": {
    "colab": {
      "collapsed_sections": [],
      "name": "Copy of ML_gym_reinforcement_exercise.ipynb",
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.8.8"
    },
    "accelerator": "GPU"
  },
  "nbformat": 4,
  "nbformat_minor": 0
}